syntax = "proto3";

package manager;

import "buf/validate/validate.proto";
import "distribution.proto";
import "events.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "instance.proto";
import "utils.proto";

option go_package = "./pb";

message RunningInstance {
  fixed64 id = 1;
  string container_id = 2;
  google.protobuf.Timestamp launched_at = 3;
  string name = 4;
  int32 players = 5;
  bool launched = 6;
  manager.Version version = 7;
  InstanceLimits limits = 8;
  InstanceConfig config = 9;
  InstanceState state = 10;
}

message RunnerGetStateResponse {
  int32 players = 1;
  InstanceState state = 2;
}

message RunnerLaunchRequest {
  fixed64 id = 1 [(buf.validate.field).required = true];
  string name = 2 [(buf.validate.field).required = true];
  string version = 3;
  manager.Distribution version_distro = 4;
  InstanceLimits limits = 5 [(buf.validate.field).required = true];
  InstanceConfig config = 6 [(buf.validate.field).required = true];
}

message RunnerSendCommandRequest {
  fixed64 instance_id = 1 [(buf.validate.field).required = true];
  string command = 2 [(buf.validate.field).required = true];
}

message RunnerListenRequest {
  fixed64 instance_id = 1 [(buf.validate.field).required = true];
  bool include_logs = 2;
}

message RunnerListenManyRequest {
  bool include_logs = 1;
  repeated fixed64 instances = 2 [
    (buf.validate.field).repeated.unique = true,
    (buf.validate.field).repeated.items.required = true
  ];
}

message RunnerListenManyResponse {
  fixed64 instance_id = 1 [(buf.validate.field).required = true];
  Event event = 2 [(buf.validate.field).required = true];
}

service RunnerService {
  rpc GetById(Snowflake) returns (RunningInstance);

  rpc GetStateById(Snowflake) returns (RunnerGetStateResponse);

  rpc Launch(RunnerLaunchRequest) returns (RunningInstance);

  rpc SendCommand(RunnerSendCommandRequest) returns (google.protobuf.Empty);

  rpc Stop(Snowflake) returns (RunningInstance);

  rpc Listen(RunnerListenRequest) returns (stream Event);

  rpc ListenMany(RunnerListenManyRequest) returns (stream RunnerListenManyResponse);
}
