syntax = "proto3";

package manager;

import "buf/validate/validate.proto";
import "distribution.proto";
import "events.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "utils.proto";

option go_package = "./pb";

message InstanceLimits {
  google.protobuf.Duration shutdown_after_idle = 1 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).duration = {
      gt: {seconds: 60}
      // 8h
      lt: {seconds: 28800}
    }
  ];
  bool auto_shutdown = 2;
  int32 max_players = 3;
  uint32 cpu = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).uint32.lt = 128000
  ];
  uint64 ram = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).uint64 = {
      // 128 MiB
      gt: 134217728
      // 1 TiB
      lt: 1099511627776
    }
  ];
}

message InstanceConfig {
  string difficulty = 1 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string = {
      in: [
        "peaceful",
        "easy",
        "normal",
        "hard"
      ]
    }
  ];
  string admin = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 20
  ];
  uint32 port = 3;
  uint32 view_distance = 4 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).uint32 = {
      gte: 2
      lte: 32
    }
  ];
  uint32 simulation_distance = 5 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).uint32 = {
      gte: 2
      lte: 32
    }
  ];
  bool allow_pirate = 6;
  bool pvp = 7;
}

enum InstanceState {
  STATE_OFFLINE = 0;
  STATE_STARTING = 1;
  STATE_RUNNING = 2;
  STATE_SHUTTING_DOWN = 3;
}

message Instance {
  fixed64 id = 1;
  fixed64 user_id = 2;
  fixed64 node_id = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  // nullable
  google.protobuf.Timestamp last_launched = 6;
  InstanceState state = 7;
  int32 players = 8;
  string name = 9;
  string description = 10;
  string version = 11;
  Distribution version_distro = 12;
  bool maintenance = 13;
  InstanceConfig config = 14;
  InstanceLimits limits = 15;
}

message PartialInstance {
  fixed64 id = 1;
  fixed64 user_id = 2;
  fixed64 node_id = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  // nullable
  google.protobuf.Timestamp last_launched = 6;
  InstanceState state = 7;
  int32 players = 8;
  string name = 9;
  string version = 10;
  Distribution version_distro = 11;
  bool maintenance = 12;
}

message InstanceGetManyResponse {
  repeated PartialInstance instances = 1;
}

message InstanceGetByUserRequest {
  fixed64 user_id = 1 [(buf.validate.field).required = true];
  Pagination pagination = 2 [(buf.validate.field).required = true];
}

message InstanceGetByNodeRequest {
  fixed64 node_id = 1 [(buf.validate.field).required = true];
  Pagination pagination = 2 [(buf.validate.field).required = true];
}

message InstanceCreateRequest {
  fixed64 user_id = 1 [(buf.validate.field).required = true];
  fixed64 node_id = 2 [(buf.validate.field).required = true];
  string name = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 1
      max_len: 128
    }
  ];
  string description = 4;
  string version = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 2
      max_len: 16
    }
  ];
  Distribution version_distro = 6;
  InstanceConfig config = 7 [(buf.validate.field).required = true];
  InstanceLimits limits = 8 [(buf.validate.field).required = true];
}

message InstanceSendCommandRequest {
  fixed64 instance_id = 1 [(buf.validate.field).required = true];
  string command = 2 [(buf.validate.field).required = true];
}

message InstanceGetEventsRequest {
  fixed64 id = 1 [(buf.validate.field).required = true];
  bool include_logs = 2;
}

service InstanceService {
  rpc GetById(Snowflake) returns (Instance);

  rpc GetMany(Pagination) returns (InstanceGetManyResponse);
  rpc GetByUser(InstanceGetByUserRequest) returns (InstanceGetManyResponse);
  rpc GetByNode(InstanceGetByNodeRequest) returns (InstanceGetManyResponse);

  rpc Launch(Snowflake) returns (google.protobuf.Empty);

  rpc Stop(Snowflake) returns (google.protobuf.Empty);

  rpc Create(InstanceCreateRequest) returns (Instance);

  rpc SendCommand(InstanceSendCommandRequest) returns (google.protobuf.Empty);

  rpc GetEvents(InstanceGetEventsRequest) returns (stream Event);

  rpc Delete(Snowflake) returns (Instance);
}
